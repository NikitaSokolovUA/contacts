{"version":3,"file":"static/js/326.b4a25492.chunk.js","mappings":"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","sources":["components/PickerDate/PickerDate.jsx","pages/FormScreen/FormScreen.jsx"],"sourcesContent":["import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { useState, useEffect } from 'react';\nimport { TextField } from '@mui/material';\n\nconst PickerDate = ({ setCredentials }) => {\n  const [date, setDate] = useState(null);\n\n  useEffect(() => {\n    if (date) {\n      setCredentials(prevState => ({\n        ...prevState,\n        birthDate: date.format('DD/MM/YYYY'),\n      }));\n    }\n  }, [date, setCredentials]);\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DatePicker\n        label=\"Date if birthday\"\n        value={date}\n        onChange={value => setDate(value)}\n        renderInput={params => <TextField {...params} />}\n        disableFuture={true}\n      />\n    </LocalizationProvider>\n  );\n};\n\nexport default PickerDate;\n","import { Container, TextField, Button, Stack, Box } from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport { useState } from 'react';\nimport AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { storage } from '../../firebase/config';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { createUser } from 'redux/users/userOperations';\nimport PickerDate from 'components/PickerDate';\nimport InputMask from 'react-input-mask';\n\nconst initialCredentials = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  phone: '',\n  birthDate: '',\n  avatar: '',\n};\n\nconst FormScreen = () => {\n  const dispatch = useDispatch();\n\n  const [credentials, setCredentials] = useState(initialCredentials);\n  const [urlAvatar, setUrlAvatar] = useState(null);\n\n  const handleChange = (event, key) => {\n    setCredentials(prevState => ({ ...prevState, [key]: event.target.value }));\n  };\n\n  const handleSubmit = e => {\n    console.log(credentials);\n\n    if (urlAvatar) {\n      console.log(urlAvatar);\n      uploadAvatar();\n    }\n\n    dispatch(createUser(credentials));\n    setCredentials(initialCredentials);\n    e.preventDefault();\n  };\n\n  const uploadAvatar = async () => {\n    const responce = await fetch(urlAvatar);\n    const image = await responce.blob();\n    const id = nanoid();\n\n    const storageRef = ref(storage, `avatar/${id}`);\n\n    await uploadBytes(storageRef, image);\n    const avatarUrl = await getDownloadURL(storageRef);\n\n    console.log(avatarUrl);\n\n    setCredentials(prevState => ({ ...prevState, avatar: avatarUrl }));\n  };\n\n  return (\n    <Container>\n      <Typography variant=\"h4\" component=\"h2\" textAlign=\"center\">\n        Create new user\n      </Typography>\n\n      <form onSubmit={e => handleSubmit(e)}>\n        <Stack\n          direction=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          <Box component=\"span\" sx={{ width: '300px' }}>\n            <TextField\n              required\n              id=\"firstName\"\n              name=\"firstName\"\n              label=\"First name\"\n              fullWidth\n              autoComplete=\"given-name\"\n              value={credentials.firstName}\n              onChange={e => handleChange(e, 'firstName')}\n            />\n          </Box>\n\n          <Box component=\"span\" sx={{ width: '300px' }}>\n            <TextField\n              required\n              id=\"lastName\"\n              name=\"lastName\"\n              label=\"Last name\"\n              fullWidth\n              autoComplete=\"family-name\"\n              value={credentials.lastName}\n              onChange={e => handleChange(e, 'lastName')}\n            />\n          </Box>\n          <Box component=\"span\" sx={{ width: '300px' }}>\n            <TextField\n              required\n              id=\"email\"\n              name=\"email\"\n              label=\"Email\"\n              type=\"email\"\n              fullWidth\n              autoComplete=\"email\"\n              value={credentials.email}\n              onChange={e => handleChange(e, 'email')}\n            />\n          </Box>\n          <Box component=\"span\" sx={{ width: '300px' }}>\n            <InputMask\n              mask=\"+38 (099) 999 99 99\"\n              onChange={e => handleChange(e, 'phone')}\n              value={credentials.phone}\n            >\n              {() => (\n                <TextField\n                  required\n                  id=\"phone\"\n                  name=\"phone\"\n                  type=\"phone\"\n                  label=\"Phone\"\n                  fullWidth\n                  autoComplete=\"phone\"\n                />\n              )}\n            </InputMask>\n          </Box>\n\n          <Box component=\"span\" sx={{ width: '300px', alignItems: 'center' }}>\n            <PickerDate setCredentials={setCredentials} />\n          </Box>\n\n          <Button\n            variant=\"outlined\"\n            component=\"label\"\n            endIcon={<AddPhotoAlternateIcon />}\n            onChange={e => {\n              // const img = e.target.value.blob();\n              console.log(e);\n              setUrlAvatar(e.target.value);\n            }}\n          >\n            {urlAvatar ? 'Loaded' : 'Load Avatar'}\n            <input hidden accept=\"image/*\" multiple type=\"file\" />\n          </Button>\n          <Button variant=\"outlined\" type=\"submit\">\n            Submit\n          </Button>\n        </Stack>\n      </form>\n    </Container>\n  );\n};\n\nexport default FormScreen;\n"],"names":["setCredentials","useState","date","setDate","useEffect","prevState","birthDate","format","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","label","value","onChange","renderInput","params","TextField","disableFuture","initialCredentials","firstName","lastName","email","phone","avatar","dispatch","useDispatch","credentials","urlAvatar","setUrlAvatar","handleChange","event","key","target","uploadAvatar","fetch","responce","blob","image","id","nanoid","storageRef","ref","storage","uploadBytes","getDownloadURL","avatarUrl","console","log","Container","Typography","variant","component","textAlign","onSubmit","e","createUser","preventDefault","handleSubmit","Stack","direction","justifyContent","alignItems","spacing","Box","sx","width","required","name","fullWidth","autoComplete","type","mask","Button","endIcon","AddPhotoAlternate","hidden","accept","multiple"],"sourceRoot":""}